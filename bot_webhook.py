import os
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# -------------------------------------------------
# INITIAL CONFIGURATION
# -------------------------------------------------

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# Secrets are supplied via environment variables -> Render Dashboard ‚ûú Environment
TOKEN = os.environ["BOT_TOKEN"]                       # Telegram bot token
OPERATOR_CHAT_ID = int(os.environ.get("OPERATOR_CHAT_ID", "1138693316"))

# For webhook hosting on Render
WEBHOOK_HOST = os.environ["WEBHOOK_HOST"]             # e.g. https://refunds-bot.onrender.com
PORT = int(os.environ.get("PORT", 10000))             # Render passes chosen port here
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# -------------------------------------------------
# STATE CONSTANTS
# -------------------------------------------------
ASK_QUESTION = 1
ADMIN_REPLY = 11
USER_REPLY = 12

# -------------------------------------------------
# STATIC TEXT & IMAGES
# -------------------------------------------------
MAIN_MENU_PHOTO_URL = "https://i.imgur.com/451wLeS.png"
MAIN_MENU_TEXT = (
    "–ù–∏–∂–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –º–µ–Ω—é —Å —Ç–∏–ø–æ–≤—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏.\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
    "–ï—Å–ª–∏ –º—ã —Ä–µ—à–∏–ª–∏ –í–∞—à –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å–∏–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É, "
    "–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∑—ã–≤.\n"
    "–° –£–≤–∞–∂–µ–Ω–∏–µ–º, TITAN STYLE!"
)

CONTACT_TEXT = (
    "–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n"
    "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –Ω–∏–∂–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
    "[–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º].\n"
    "(–¢–∞–∫–∂–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞, –∞ —Ç–∞–∫–∂–µ –Ω–æ–º–µ—Ä –ó–∞–∫–∞–∑–∞.)\n\n"
    "–í—Å–∫–æ—Ä–µ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–π —Å–ª—É–∂–±—ã."
)

# -------------------------------------------------
# KEYBOARDS
# -------------------------------------------------

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–º–æ–∂–µ–º –ø–æ–º–æ—á—å +", callback_data="approve")],
        [InlineKeyboardButton("‚ùå –ù–ï –°–º–æ–∂–µ–º –ø–æ–º–æ—á—å -", callback_data="reject")],
        [InlineKeyboardButton("‚ùì –ù–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞", callback_data="contact")],
        [InlineKeyboardButton("üõç –ú–´ –ù–ê –û–ó–û–ù", url="https://www.ozon.ru/seller/titan-style-1468753/products/?miniapp=seller_1468753")],
        [InlineKeyboardButton("üõç –ú–´ –ù–ê –í–ë", url="https://www.wildberries.ru/brands/310806956-titan-style/galstuki")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_nav_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_continue_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="add_more"),
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="done"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def admin_reply_button(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{user_id}")]]
    )

def user_reply_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω—É", callback_data="user_reply")]]
    )

# -------------------------------------------------
# HANDLERS
# -------------------------------------------------

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo=MAIN_MENU_PHOTO_URL,
        caption=MAIN_MENU_TEXT,
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard(),
    )

# ---------- Common button dispatcher ----------

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

    if data == "approve":
        await query.message.chat.send_photo(
            photo="https://i.imgur.com/ZLQxRGb.png",
            reply_markup=get_nav_keyboard(),
        )
        return ASK_QUESTION

    elif data == "reject":
        await query.message.chat.send_photo(
            photo="https://i.imgur.com/IxAb3Pu.png",
            reply_markup=get_nav_keyboard(),
        )
        return ConversationHandler.END

    elif data == "contact":
        await query.message.chat.send_message(
            text=CONTACT_TEXT,
            parse_mode="HTML",
            reply_markup=get_nav_keyboard(),
        )
        return ASK_QUESTION

    elif data in ("back", "main_menu"):
        await query.message.chat.send_photo(
            photo=MAIN_MENU_PHOTO_URL,
            caption=MAIN_MENU_TEXT,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(),
        )
        return ConversationHandler.END

    elif data == "add_more":
        await query.message.chat.send_message(
            text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.",
            parse_mode="HTML",
            reply_markup=get_nav_keyboard(),
        )
        return ASK_QUESTION

    elif data == "done":
        await query.message.chat.send_photo(
            photo=MAIN_MENU_PHOTO_URL,
            caption=MAIN_MENU_TEXT,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(),
        )
        return ConversationHandler.END

    # -------------- mini dialogs --------------
    elif data.startswith("admin_reply_"):
        return await admin_reply_start(update, context)

    elif data == "user_reply":
        return await user_reply_start(update, context)

    return ConversationHandler.END

# ---------- ASK_QUESTION state handlers ----------

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_text = update.message.text

    message_text = (
        f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç: {user.first_name} {user.last_name or ''} "
        f"(@{user.username or '–Ω–µ—Ç'})\n"
        f"User ID: {user.id}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}"
    )

    await context.bot.send_message(
        chat_id=OPERATOR_CHAT_ID,
        text=message_text,
        parse_mode="HTML",
        reply_markup=admin_reply_button(user.id),
    )

    await update.message.reply_text(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=get_continue_keyboard(),
    )
    return ASK_QUESTION

async def attachment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–∫—É–º–µ–Ω—Ç—ã / —Ñ–æ—Ç–æ / –≤–∏–¥–µ–æ –≤ ASK_QUESTION."""
    user = update.message.from_user
    user_info = (
        f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç: {user.first_name} {user.last_name or ''} "
        f"(@{user.username or '–Ω–µ—Ç'})\n"
        f"User ID: {user.id}\n"
    )

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if update.message.document:
        await context.bot.forward_message(
            chat_id=OPERATOR_CHAT_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id,
        )
        await context.bot.send_message(
            chat_id=OPERATOR_CHAT_ID,
            text=user_info + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç.",
            parse_mode="HTML",
            reply_markup=admin_reply_button(user.id),
        )

    elif update.message.photo:
        await context.bot.forward_message(
            chat_id=OPERATOR_CHAT_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id,
        )
        await context.bot.send_message(
            chat_id=OPERATOR_CHAT_ID,
            text=user_info + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ.",
            parse_mode="HTML",
            reply_markup=admin_reply_button(user.id),
        )

    elif update.message.video:
        await context.bot.forward_message(
            chat_id=OPERATOR_CHAT_ID,
            from_chat
