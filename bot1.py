import logging
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# ---------------------------------------------
# SETTINGS
# ---------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

OPERATOR_CHAT_ID = 1138693316  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler:
ASK_QUESTION = 1     # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ("–ù–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞")
ADMIN_REPLY = 11     # –ú–∏–Ω–∏-–¥–∏–∞–ª–æ–≥: –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
USER_REPLY = 12      # –ú–∏–Ω–∏-–¥–∏–∞–ª–æ–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω—É

MAIN_MENU_PHOTO_URL = "https://i.imgur.com/451wLeS.png"
MAIN_MENU_TEXT = (
    "–ù–∏–∂–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –º–µ–Ω—é —Å —Ç–∏–ø–æ–≤—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, "
    "–Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
    "–ï—Å–ª–∏ –º—ã —Ä–µ—à–∏–ª–∏ –í–∞—à –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å–∏–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É, "
    "–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∑—ã–≤.\n"
    "–° –£–≤–∞–∂–µ–Ω–∏–µ–º, TITAN STYLE!"
)

CONTACT_TEXT = (
    "<b>–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:</b>\n"
    "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –Ω–∏–∂–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
    "[<b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º</b>].\n"
    "(–¢–∞–∫–∂–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞, –∞ —Ç–∞–∫–∂–µ –Ω–æ–º–µ—Ä –ó–∞–∫–∞–∑–∞.)\n\n"
    "–í—Å–∫–æ—Ä–µ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è <b>—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–π —Å–ª—É–∂–±—ã</b>."
)

# ---------------------------------------------
# KEYBOARD FUNCTIONS
# ---------------------------------------------
def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Å—Ç–æ–ª–±–∏–∫–æ–º."""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–º–æ–∂–µ–º –ø–æ–º–æ—á—å +", callback_data="approve")],
        [InlineKeyboardButton("‚ùå –ù–ï –°–º–æ–∂–µ–º –ø–æ–º–æ—á—å -", callback_data="reject")],
        [InlineKeyboardButton("üí¨ –ù–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞", callback_data="contact")],
        [InlineKeyboardButton("–ú–´ –ù–ê –û–ó–û–ù", url="https://www.ozon.ru/seller/titan-style-1468753/products/?miniapp=seller_1468753")],
        [InlineKeyboardButton("–ú–´ –ù–ê –í–ë", url="https://www.wildberries.ru/brands/310806956-titan-style/galstuki")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_nav_keyboard():
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è: –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    keyboard = [
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_continue_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: '–î–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ' –∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'."""
    keyboard = [
        [
            InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="add_more"),
            InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="done")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def admin_reply_button(user_id: int):
    """–ö–Ω–æ–ø–∫–∞ '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, callback_data = "admin_reply_<user_id>"."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{user_id}")]
    ])

def user_reply_button():
    """–ö–Ω–æ–ø–∫–∞ '–û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω—É' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω—É", callback_data="user_reply")]
    ])

# ---------------------------------------------
# HANDLERS
# ---------------------------------------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    await update.message.reply_photo(
        photo=MAIN_MENU_PHOTO_URL,
        caption=MAIN_MENU_TEXT,
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é:
      - "approve": –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ https://i.imgur.com/ZLQxRGb.png;
      - "reject": –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ https://i.imgur.com/IxAb3Pu.png;
      - "contact": –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é CONTACT_TEXT –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ASK_QUESTION;
      - "back"/"main_menu": –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é;
      - "add_more": –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç—ã–º;
      - "done": –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é;
      - –ï—Å–ª–∏ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "admin_reply_" –∏–ª–∏ —Ä–∞–≤–Ω–∞ "user_reply", –ø–µ—Ä–µ–¥–∞—ë–º –≤ –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∏.
    """
    query = update.callback_query
    data = query.data
    await query.answer()
    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if data == "approve":
        await query.message.chat.send_photo(
            photo="https://i.imgur.com/ZLQxRGb.png",
            reply_markup=get_nav_keyboard()
        )
        return ASK_QUESTION

    elif data == "reject":
        await query.message.chat.send_photo(
            photo="https://i.imgur.com/IxAb3Pu.png",
            reply_markup=get_nav_keyboard()
        )
        return ConversationHandler.END

    elif data == "contact":
        await query.message.chat.send_message(
            text=CONTACT_TEXT,
            parse_mode="HTML",
            reply_markup=get_nav_keyboard()
        )
        return ASK_QUESTION

    elif data in ["back", "main_menu"]:
        await query.message.chat.send_photo(
            photo=MAIN_MENU_PHOTO_URL,
            caption=MAIN_MENU_TEXT,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

    elif data == "add_more":
        await query.message.chat.send_message(
            text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.",
            parse_mode="HTML",
            reply_markup=get_nav_keyboard()
        )
        return ASK_QUESTION

    elif data == "done":
        await query.message.chat.send_photo(
            photo=MAIN_MENU_PHOTO_URL,
            caption=MAIN_MENU_TEXT,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

    elif data.startswith("admin_reply_"):
        return await admin_reply_start(update, context)

    elif data == "user_reply":
        return await user_reply_start(update, context)

    return ConversationHandler.END

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ASK_QUESTION.
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.
    """
    user_text = update.message.text
    message_text = (
        f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç:</b> {update.message.from_user.first_name} "
        f"{update.message.from_user.last_name or ''} (@{update.message.from_user.username or '–Ω–µ—Ç'})\n"
        f"<b>User ID:</b> {update.message.from_user.id}\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {user_text}"
    )
    await context.bot.send_message(
        chat_id=OPERATOR_CHAT_ID,
        text=message_text,
        parse_mode="HTML",
        reply_markup=admin_reply_button(update.message.from_user.id)
    )
    await update.message.reply_text(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=get_continue_keyboard()
    )
    return ASK_QUESTION

async def attachment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π (–¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ASK_QUESTION.
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.
    """
    user_info = (
        f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç:</b> {update.message.from_user.first_name} "
        f"{update.message.from_user.last_name or ''} (@{update.message.from_user.username or '–Ω–µ—Ç'})\n"
        f"<b>User ID:</b> {update.message.from_user.id}\n"
    )
    if update.message.document:
        doc = update.message.document
        file = await doc.get_file()
        file_path = f"user_doc_{update.message.from_user.id}_{doc.file_unique_id}"
        await file.download_to_drive(file_path)
        caption = user_info + "<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç.</i>"
        with open(file_path, "rb") as f:
            await context.bot.send_document(
                chat_id=OPERATOR_CHAT_ID,
                document=f,
                caption=caption,
                parse_mode="HTML",
                reply_markup=admin_reply_button(update.message.from_user.id)
            )
    elif update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_path = f"user_photo_{update.message.from_user.id}_{photo.file_unique_id}.jpg"
        await file.download_to_drive(file_path)
        caption = user_info + "<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ.</i>"
        with open(file_path, "rb") as f:
            await context.bot.send_photo(
                chat_id=OPERATOR_CHAT_ID,
                photo=f,
                caption=caption,
                parse_mode="HTML",
                reply_markup=admin_reply_button(update.message.from_user.id)
            )
    elif update.message.video:
        video = update.message.video
        file = await video.get_file()
        file_path = f"user_video_{update.message.from_user.id}_{video.file_unique_id}.mp4"
        await file.download_to_drive(file_path)
        caption = user_info + "<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ.</i>"
        with open(file_path, "rb") as f:
            await context.bot.send_video(
                chat_id=OPERATOR_CHAT_ID,
                video=f,
                caption=caption,
                parse_mode="HTML",
                reply_markup=admin_reply_button(update.message.from_user.id)
            )
    await update.message.reply_text(
        "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=get_continue_keyboard()
    )
    return ASK_QUESTION

async def not_in_conversation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üí¨ –ù–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML")
    return ConversationHandler.END

# ---------------------------------------------
# MINI DIALOG: ADMIN -> USER
# ---------------------------------------------
async def admin_reply_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∞: –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" (callback_data –≤–∏–¥–∞ "admin_reply_<user_id>").
    –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ADMIN_REPLY.
    """
    query = update.callback_query
    await query.answer()
    try:
        user_id = int(query.data.split("_")[-1])
    except ValueError:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return ConversationHandler.END
    context.user_data["reply_to_user_id"] = user_id
    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await query.message.chat.send_message(
        text=f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ.",
        parse_mode="HTML"
    )
    return ADMIN_REPLY

async def admin_reply_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ADMIN_REPLY."""
    if "reply_to_user_id" not in context.user_data:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", parse_mode="HTML")
        return ConversationHandler.END
    user_id = context.user_data["reply_to_user_id"]
    answer_text = update.message.text
    message = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{answer_text}"
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode="HTML",
            reply_markup=user_reply_button()
        )
        await update.message.reply_text(
            f"–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", parse_mode="HTML")
    context.user_data.pop("reply_to_user_id", None)
    return ConversationHandler.END

async def admin_reply_attachment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ADMIN_REPLY."""
    if "reply_to_user_id" not in context.user_data:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", parse_mode="HTML")
        return ConversationHandler.END
    user_id = context.user_data["reply_to_user_id"]

    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_path = f"admin_reply_photo_{update.message.from_user.id}_{photo.file_unique_id}.jpg"
        await file.download_to_drive(file_path)
        caption = "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>"
        try:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=open(file_path, "rb"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=user_reply_button()
            )
            await update.message.reply_text(f"–í–∞—à –æ—Ç–≤–µ—Ç (—Ñ–æ—Ç–æ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", parse_mode="HTML")
    elif update.message.document:
        doc = update.message.document
        file = await doc.get_file()
        file_path = f"admin_reply_doc_{update.message.from_user.id}_{doc.file_unique_id}"
        await file.download_to_drive(file_path)
        caption = "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>"
        try:
            await context.bot.send_document(
                chat_id=user_id,
                document=open(file_path, "rb"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=user_reply_button()
            )
            await update.message.reply_text(f"–í–∞—à –æ—Ç–≤–µ—Ç (–¥–æ–∫—É–º–µ–Ω—Ç) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", parse_mode="HTML")
    elif update.message.video:
        video = update.message.video
        file = await video.get_file()
        file_path = f"admin_reply_video_{update.message.from_user.id}_{video.file_unique_id}.mp4"
        await file.download_to_drive(file_path)
        caption = "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>"
        try:
            await context.bot.send_video(
                chat_id=user_id,
                video=open(file_path, "rb"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=user_reply_button()
            )
            await update.message.reply_text(f"–í–∞—à –æ—Ç–≤–µ—Ç (–≤–∏–¥–µ–æ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", parse_mode="HTML")
    context.user_data.pop("reply_to_user_id", None)
    return ConversationHandler.END

# ---------------------------------------------
# MINI DIALOG: USER -> ADMIN
# ---------------------------------------------
async def user_reply_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω—É"."""
    query = update.callback_query
    await query.answer()
    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    context.user_data["reply_to_admin"] = True
    await query.message.chat.send_message(
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ.",
        parse_mode="HTML"
    )
    return USER_REPLY

async def user_reply_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ USER_REPLY."""
    if "reply_to_admin" not in context.user_data:
        await update.message.reply_text("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ.", parse_mode="HTML")
        return ConversationHandler.END
    user_text = update.message.text
    message = (
        f"<b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {update.message.from_user.first_name}\n"
        f"<b>User ID:</b> {update.message.from_user.id}\n\n"
        f"{user_text}"
    )
    try:
        await context.bot.send_message(
            chat_id=OPERATOR_CHAT_ID,
            text=message,
            parse_mode="HTML",
            reply_markup=admin_reply_button(update.message.from_user.id)
        )
        await update.message.reply_text("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω—É.", parse_mode="HTML")
    context.user_data.pop("reply_to_admin", None)
    return ConversationHandler.END

async def user_reply_attachment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ USER_REPLY."""
    if "reply_to_admin" not in context.user_data:
        await update.message.reply_text("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ.", parse_mode="HTML")
        return ConversationHandler.END
    admin_id = OPERATOR_CHAT_ID
    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_path = f"user_reply_photo_{update.message.from_user.id}_{photo.file_unique_id}.jpg"
        await file.download_to_drive(file_path)
        caption = f"<b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {update.message.from_user.first_name}"
        try:
            await context.bot.send_photo(
                chat_id=admin_id,
                photo=open(file_path, "rb"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=admin_reply_button(update.message.from_user.id)
            )
            await update.message.reply_text("–í–∞—à –æ—Ç–≤–µ—Ç (—Ñ–æ—Ç–æ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
    elif update.message.document:
        doc = update.message.document
        file = await doc.get_file()
        file_path = f"user_reply_doc_{update.message.from_user.id}_{doc.file_unique_id}"
        await file.download_to_drive(file_path)
        caption = f"<b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {update.message.from_user.first_name}"
        try:
            await context.bot.send_document(
                chat_id=admin_id,
                document=open(file_path, "rb"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=admin_reply_button(update.message.from_user.id)
            )
            await update.message.reply_text("–í–∞—à –æ—Ç–≤–µ—Ç (–¥–æ–∫—É–º–µ–Ω—Ç) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
    elif update.message.video:
        video = update.message.video
        file = await video.get_file()
        file_path = f"user_reply_video_{update.message.from_user.id}_{video.file_unique_id}.mp4"
        await file.download_to_drive(file_path)
        caption = f"<b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {update.message.from_user.first_name}"
        try:
            await context.bot.send_video(
                chat_id=admin_id,
                video=open(file_path, "rb"),
                caption=caption,
                parse_mode="HTML",
                reply_markup=admin_reply_button(update.message.from_user.id)
            )
            await update.message.reply_text("–í–∞—à –æ—Ç–≤–µ—Ç (–≤–∏–¥–µ–æ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
    context.user_data.pop("reply_to_admin", None)
    return ConversationHandler.END

# ---------------------------------------------
# MAIN HANDLERS
# ---------------------------------------------
async def not_in_conversation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üí¨ –ù–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML")
    return ConversationHandler.END

# ---------------------------------------------
# MAIN
# ---------------------------------------------
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_main = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^(contact)$")],
        states={
            ASK_QUESTION: [
                MessageHandler(filters.Document.ALL | filters.VIDEO | filters.PHOTO, attachment_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler),
                CallbackQueryHandler(button_handler, pattern="^(add_more|done|back|main_menu)$")
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_handler)],
        allow_reentry=True
    )

    conv_reply = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_reply_start, pattern=r"^admin_reply_\d+$"),
            CallbackQueryHandler(user_reply_start, pattern="^user_reply$")
        ],
        states={
            ADMIN_REPLY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_reply_text),
                MessageHandler(filters.Document.ALL | filters.VIDEO | filters.PHOTO, admin_reply_attachment)
            ],
            USER_REPLY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, user_reply_text),
                MessageHandler(filters.Document.ALL | filters.VIDEO | filters.PHOTO, user_reply_attachment)
            ]
        },
        fallbacks=[],
        allow_reentry=True
    )

    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(conv_main)
    application.add_handler(conv_reply)
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^(approve|reject|back|main_menu)$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, not_in_conversation_handler))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.VIDEO | filters.PHOTO, not_in_conversation_handler))

    application.run_polling()

if __name__ == '__main__':
    main()
